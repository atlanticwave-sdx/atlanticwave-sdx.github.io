# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PatchUsersUserIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name=None, first_name=None, last_name=None, email=None, password=None, user_status=None):  # noqa: E501
        """PatchUsersUserIdRequest - a model defined in OpenAPI

        :param user_name: The user_name of this PatchUsersUserIdRequest.  # noqa: E501
        :type user_name: str
        :param first_name: The first_name of this PatchUsersUserIdRequest.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this PatchUsersUserIdRequest.  # noqa: E501
        :type last_name: str
        :param email: The email of this PatchUsersUserIdRequest.  # noqa: E501
        :type email: str
        :param password: The password of this PatchUsersUserIdRequest.  # noqa: E501
        :type password: str
        :param user_status: The user_status of this PatchUsersUserIdRequest.  # noqa: E501
        :type user_status: bool
        """
        self.openapi_types = {
            'user_name': str,
            'first_name': str,
            'last_name': str,
            'email': str,
            'password': str,
            'user_status': bool
        }

        self.attribute_map = {
            'user_name': 'user_name',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'email': 'email',
            'password': 'password',
            'user_status': 'user_status'
        }

        self._user_name = user_name
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._password = password
        self._user_status = user_status

    @classmethod
    def from_dict(cls, dikt) -> 'PatchUsersUserIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The patch_users_user_id_request of this PatchUsersUserIdRequest.  # noqa: E501
        :rtype: PatchUsersUserIdRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self):
        """Gets the user_name of this PatchUsersUserIdRequest.


        :return: The user_name of this PatchUsersUserIdRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this PatchUsersUserIdRequest.


        :param user_name: The user_name of this PatchUsersUserIdRequest.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this PatchUsersUserIdRequest.


        :return: The first_name of this PatchUsersUserIdRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PatchUsersUserIdRequest.


        :param first_name: The first_name of this PatchUsersUserIdRequest.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PatchUsersUserIdRequest.


        :return: The last_name of this PatchUsersUserIdRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PatchUsersUserIdRequest.


        :param last_name: The last_name of this PatchUsersUserIdRequest.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this PatchUsersUserIdRequest.

        If a new email is given, the user status property will be set to false.  # noqa: E501

        :return: The email of this PatchUsersUserIdRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PatchUsersUserIdRequest.

        If a new email is given, the user status property will be set to false.  # noqa: E501

        :param email: The email of this PatchUsersUserIdRequest.
        :type email: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this PatchUsersUserIdRequest.


        :return: The password of this PatchUsersUserIdRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PatchUsersUserIdRequest.


        :param password: The password of this PatchUsersUserIdRequest.
        :type password: str
        """

        self._password = password

    @property
    def user_status(self):
        """Gets the user_status of this PatchUsersUserIdRequest.


        :return: The user_status of this PatchUsersUserIdRequest.
        :rtype: bool
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this PatchUsersUserIdRequest.


        :param user_status: The user_status of this PatchUsersUserIdRequest.
        :type user_status: bool
        """

        self._user_status = user_status
