# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, user_name=None, first_name=None, last_name=None, email=None, password=None, user_status=None, created_date=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: int
        :param user_name: The user_name of this User.  # noqa: E501
        :type user_name: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param user_status: The user_status of this User.  # noqa: E501
        :type user_status: bool
        :param created_date: The created_date of this User.  # noqa: E501
        :type created_date: date
        """
        self.openapi_types = {
            'user_id': int,
            'user_name': str,
            'first_name': str,
            'last_name': str,
            'email': str,
            'password': str,
            'user_status': bool,
            'created_date': date
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'user_name': 'user_name',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'email': 'email',
            'password': 'password',
            'user_status': 'user_status',
            'created_date': 'created_date'
        }

        self._user_id = user_id
        self._user_name = user_name
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._password = password
        self._user_status = user_status
        self._created_date = created_date

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this User.

        Unique identifier for the given user.  # noqa: E501

        :return: The user_id of this User.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        Unique identifier for the given user.  # noqa: E501

        :param user_id: The user_id of this User.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this User.


        :return: The user_name of this User.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.


        :param user_name: The user_name of this User.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501
        if user_name is not None and len(user_name) < 3:
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `3`")  # noqa: E501
        if user_name is not None and not re.search(r'^[A-Za-z]*$', user_name):  # noqa: E501
            raise ValueError("Invalid value for `user_name`, must be a follow pattern or equal to `/^[A-Za-z]*$/`")  # noqa: E501

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """
        if first_name is not None and len(first_name) < 3:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `3`")  # noqa: E501
        if first_name is not None and not re.search(r'^[A-Za-z]*$', first_name):  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must be a follow pattern or equal to `/^[A-Za-z]*$/`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """
        if last_name is not None and len(last_name) < 3:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `3`")  # noqa: E501
        if last_name is not None and not re.search(r'^[A-Za-z]*$', last_name):  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must be a follow pattern or equal to `/^[A-Za-z]*$/`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")  # noqa: E501
        if password is not None and not re.search(r'^[A-Za-z0-9!@#$%^&*_.-]*$', password):  # noqa: E501
            raise ValueError("Invalid value for `password`, must be a follow pattern or equal to `/^[A-Za-z0-9!@#$%^&*_.-]*$/`")  # noqa: E501

        self._password = password

    @property
    def user_status(self):
        """Gets the user_status of this User.

        Set to true if the user's email has been verified.  # noqa: E501

        :return: The user_status of this User.
        :rtype: bool
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this User.

        Set to true if the user's email has been verified.  # noqa: E501

        :param user_status: The user_status of this User.
        :type user_status: bool
        """

        self._user_status = user_status

    @property
    def created_date(self):
        """Gets the created_date of this User.

        The date that the user was created.  # noqa: E501

        :return: The created_date of this User.
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this User.

        The date that the user was created.  # noqa: E501

        :param created_date: The created_date of this User.
        :type created_date: date
        """

        self._created_date = created_date
